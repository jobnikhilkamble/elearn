{"version":3,"sources":["pages/DashboardCard.js","pages/utils.js","pages/DashboardPage.js","utils/colors.js"],"names":["DashboardCard","_ref","item","onClick","title","icon","count","color","goto","react_default","a","createElement","className","style","cursor","display","height","backgroundColor","minWidth","fontSize","marginTop","flex","marginLeft","getCardItems","Object","asyncToGenerator","regenerator_default","mark","_callee","cardItems","cardResponse","cards","cardsForDashBoard","wrap","_context","prev","next","window","scrollTo","Students","Videos","Requests","fetch","then","res","json","sent","map","cardItem","objectSpread","abrupt","t0","showToast","type","stop","apply","this","arguments","DashboardPage","Date","componentDidMount","updateRawData","onCardClicked","_this","props","history","push","_this2","availableColor","length","undefined","getComputedStyle","document","documentElement","getPropertyValue","concat","getColor","Page","breadcrumbs","name","active","key","DashboardCard_DashboardCard","React","Component","connect","state","rawData"],"mappings":"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","file":"static/js/3.27daa59a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const DashboardCard = ({ item, onClick }) => {\r\n         const { title, icon, count, color, goto } = item;\r\n\r\n         return (\r\n           <div\r\n             className=\"card\"\r\n             onClick={() => onClick(item)}\r\n             style={{ cursor: 'pointer' }}\r\n           >\r\n             <div>\r\n               <div style={{ display: 'flex', height: 80 }}>\r\n                 <div style={{ backgroundColor: color, minWidth: 75 }}>\r\n                   <center>\r\n                     {' '}\r\n                     <i\r\n                       style={{ fontSize: 50, color: 'white', marginTop: 10 }}\r\n                       className={icon}\r\n                     />\r\n                   </center>\r\n                 </div>\r\n                 <div\r\n                   style={{\r\n                     flex: 2,\r\n                     marginLeft: 20,\r\n                     color: '#a5b1b3',\r\n                     marginTop: 5,\r\n                   }}\r\n                 >\r\n                   <div style={{ display: 'grid' }}>\r\n                     <span> {title}</span>\r\n                     <b style={{ color: 'black', fontSize: 25 }}>{count}</b>\r\n                   </div>\r\n                 </div>\r\n               </div>\r\n             </div>\r\n           </div>\r\n         );\r\n       };\r\n","import { showToast } from '../helpers/toasts';\r\n\r\nexport const getCardItems = async () => {\r\n  try {\r\n    window.scrollTo(0, 0);\r\n    const cardItems = {\r\n      Students: { icon: 'fa fa-graduation-cap', color: '#01c0ef' },\r\n      Videos: {\r\n        icon: 'fa fa-video-camera',\r\n        color: '#dd4c3a',\r\n        goto: '/resource',\r\n      },\r\n      Requests: {\r\n        icon: 'fa fa-paper-plane ',\r\n        color: '#f39c13',\r\n        goto: '/invitations',\r\n      },\r\n    };\r\n    cardItems['PDF Notes'] = {\r\n      icon: 'fa fa-sticky-note-o',\r\n      color: '#01a65b',\r\n      goto: '/resource',\r\n    };\r\n    const cardResponse = await fetch('http://localhost/getDashboardInfo.php')\r\n      .then(res => res.json())\r\n      .then(res => res);\r\n    const cards = cardResponse.res;\r\n    const cardsForDashBoard = cards.map(cardItem => {\r\n      const newCardItem = { ...cardItem, ...cardItems[cardItem.title] };\r\n      return newCardItem;\r\n    });\r\n    return cardsForDashBoard;\r\n  } catch (err) {\r\n    showToast('Something went wrong !', { type: 'error' });\r\n  }\r\n};\r\n","import Page from 'components/Page';\r\n\r\nimport React from 'react';\r\n\r\nimport { getColor } from 'utils/colors';\r\nimport { updateRawData } from '../actions';\r\nimport { DashboardCard } from './DashboardCard';\r\nimport { connect } from 'react-redux';\r\nimport { showToast } from '../helpers/toasts';\r\nimport { getCardItems } from './utils';\r\n\r\nconst today = new Date();\r\n\r\nclass DashboardPage extends React.Component {\r\n  componentDidMount = async () => {\r\n    const cardsForDashBoard = await getCardItems();\r\n    updateRawData({ cardsForDashBoard: cardsForDashBoard });\r\n  };\r\n  onCardClicked = item => {\r\n    const { goto } = item;\r\n    if (goto) {\r\n      this.props.history.push(goto);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const primaryColor = getColor('primary');\r\n    const { cardsForDashBoard } = this.props;\r\n    return (\r\n      <Page\r\n        className=\"DashboardPage\"\r\n        title=\"Dashboard\"\r\n        breadcrumbs={[{ name: 'Dashboard', active: true }]}\r\n      >\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            {cardsForDashBoard &&\r\n              cardsForDashBoard.length > 0 &&\r\n              cardsForDashBoard.map(cardItem => (\r\n                <div key={cardItem.title} className=\"col-lg-3\">\r\n                  <DashboardCard item={cardItem} onClick={this.onCardClicked} />\r\n                </div>\r\n              ))}\r\n          </div>\r\n        </div>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(state => {\r\n  const { cardsForDashBoard } = state.rawData;\r\n  return { cardsForDashBoard };\r\n})(DashboardPage);\r\n","// const availableColors = [\r\n//   'blue',\r\n//   'indigo',\r\n//   'purple',\r\n//   'pink',\r\n//   'red',\r\n//   'orange',\r\n//   'yellow',\r\n//   'green',\r\n//   'teal',\r\n//   'cyan',\r\n//   'white',\r\n//   'gray',\r\n//   'gray-dark',\r\n//   'primary',\r\n//   'secondary',\r\n//   'success',\r\n//   'info',\r\n//   'warning',\r\n//   'danger',\r\n//   'light',\r\n//   'dark',\r\n// ];\r\n\r\nexport const getColor = (availableColor = 'primary') => {\r\n  if (typeof window === 'undefined') {\r\n    return null;\r\n  }\r\n\r\n  const color = window\r\n    .getComputedStyle(document.documentElement)\r\n    .getPropertyValue(`--${availableColor}`);\r\n\r\n  return color;\r\n};\r\n\r\nexport const getThemeColors = () => [\r\n  'primary',\r\n  'secondary',\r\n  'success',\r\n  'info',\r\n  'warning',\r\n  'danger',\r\n];\r\n"],"sourceRoot":""}